//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCExternalSite
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using DCExternalSite.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace DCExternalSite.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationService' domain service.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("DCExternalSite-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(DCExternalSite.Web.Resources.RegistrationDataResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorInvalidEmail' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [RegularExpressionAttribute("^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$", ErrorMessageResourceName = "ValidationErrorInvalidEmail", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(DCExternalSite.Web.Resources.RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadFriendlyNameLength' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [StringLengthAttribute(255, ErrorMessageResourceName = "ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(DCExternalSite.Web.Resources.RegistrationDataResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(DCExternalSite.Web.Resources.RegistrationDataResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorInvalidUserName' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [RegularExpressionAttribute("^[a-zA-Z0-9_]*$", ErrorMessageResourceName = "ValidationErrorInvalidUserName", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadUserNameLength' on type 'DCExternalSite.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'DCExternalSite.csproj'.
        // [StringLengthAttribute(255, ErrorMessageResourceName = "ValidationErrorBadUserNameLength", ErrorMessageResourceType = typeof(DCExternalSite.Web.Resources.ValidationErrorResources), MinimumLength = 4)]
        // 
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(DCExternalSite.Web.Resources.RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _displayName;
        
        private string _friendlyName;
        
        private int _id;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaisePropertyChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'UserRegistrationService' domain service.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("DCExternalSite-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace DCExternalSite.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Cabinet' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class Cabinet : Entity
    {
        
        private EntityRef<Department> _department;
        
        private string _description;
        
        private EntityCollection<Employee> _employees;
        
        private int _id_Cabinet;
        
        private int _id_Dept;
        
        private int _number;
        
        private string _phone;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnID_CabinetChanging(int value);
        partial void OnID_CabinetChanged();
        partial void OnID_DeptChanging(int value);
        partial void OnID_DeptChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Cabinet"/> class.
        /// </summary>
        public Cabinet()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Department"/> entity.
        /// </summary>
        [Association("Department_Cabinet", "ID_Dept", "ID_Dept", IsForeignKey=true)]
        [XmlIgnore()]
        public Department Department
        {
            get
            {
                if ((this._department == null))
                {
                    this._department = new EntityRef<Department>(this, "Department", this.FilterDepartment);
                }
                return this._department.Entity;
            }
            set
            {
                Department previous = this.Department;
                if ((previous != value))
                {
                    this.ValidateProperty("Department", value);
                    if ((previous != null))
                    {
                        this._department.Entity = null;
                        previous.Cabinets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Dept = value.ID_Dept;
                    }
                    else
                    {
                        this.ID_Dept = default(int);
                    }
                    this._department.Entity = value;
                    if ((value != null))
                    {
                        value.Cabinets.Add(this);
                    }
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entities.
        /// </summary>
        [Association("Cabinet_Employee", "ID_Cabinet", "ID_Cabinet")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Cabinet' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_Cabinet
        {
            get
            {
                return this._id_Cabinet;
            }
            set
            {
                if ((this._id_Cabinet != value))
                {
                    this.OnID_CabinetChanging(value);
                    this.ValidateProperty("ID_Cabinet", value);
                    this._id_Cabinet = value;
                    this.RaisePropertyChanged("ID_Cabinet");
                    this.OnID_CabinetChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Dept' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Dept
        {
            get
            {
                return this._id_Dept;
            }
            set
            {
                if ((this._id_Dept != value))
                {
                    this.OnID_DeptChanging(value);
                    this.RaiseDataMemberChanging("ID_Dept");
                    this.ValidateProperty("ID_Dept", value);
                    this._id_Dept = value;
                    this.RaiseDataMemberChanged("ID_Dept");
                    this.OnID_DeptChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        private bool FilterDepartment(Department entity)
        {
            return (entity.ID_Dept == this.ID_Dept);
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Cabinet = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Cabinet = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.ID_Cabinet == this.ID_Cabinet);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_Cabinet;
        }
    }
    
    /// <summary>
    /// The 'Day' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class Day : Entity
    {
        
        private DateTime _date;
        
        private DateTime _endTime;
        
        private int _id_Day;
        
        private DateTime _startTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnEndTimeChanging(DateTime value);
        partial void OnEndTimeChanged();
        partial void OnID_DayChanging(int value);
        partial void OnID_DayChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Day"/> class.
        /// </summary>
        public Day()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndTime' value.
        /// </summary>
        [DataMember()]
        public DateTime EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.RaiseDataMemberChanging("EndTime");
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaiseDataMemberChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Day' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_Day
        {
            get
            {
                return this._id_Day;
            }
            set
            {
                if ((this._id_Day != value))
                {
                    this.OnID_DayChanging(value);
                    this.ValidateProperty("ID_Day", value);
                    this._id_Day = value;
                    this.RaisePropertyChanged("ID_Day");
                    this.OnID_DayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartTime' value.
        /// </summary>
        [DataMember()]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_Day;
        }
    }
    
    /// <summary>
    /// The 'Department' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class Department : Entity
    {
        
        private EntityCollection<Cabinet> _cabinets;
        
        private string _description;
        
        private EntityCollection<Employee> _employees;
        
        private int _id_Dept;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnID_DeptChanging(int value);
        partial void OnID_DeptChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Department"/> class.
        /// </summary>
        public Department()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Cabinet"/> entities.
        /// </summary>
        [Association("Department_Cabinet", "ID_Dept", "ID_Dept")]
        [XmlIgnore()]
        public EntityCollection<Cabinet> Cabinets
        {
            get
            {
                if ((this._cabinets == null))
                {
                    this._cabinets = new EntityCollection<Cabinet>(this, "Cabinets", this.FilterCabinets, this.AttachCabinets, this.DetachCabinets);
                }
                return this._cabinets;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entities.
        /// </summary>
        [Association("Department_Employee", "ID_Dept", "ID_Dept")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Dept' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_Dept
        {
            get
            {
                return this._id_Dept;
            }
            set
            {
                if ((this._id_Dept != value))
                {
                    this.OnID_DeptChanging(value);
                    this.ValidateProperty("ID_Dept", value);
                    this._id_Dept = value;
                    this.RaisePropertyChanged("ID_Dept");
                    this.OnID_DeptChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachCabinets(Cabinet entity)
        {
            entity.Department = this;
        }
        
        private void DetachCabinets(Cabinet entity)
        {
            entity.Department = null;
        }
        
        private bool FilterCabinets(Cabinet entity)
        {
            return (entity.ID_Dept == this.ID_Dept);
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Department = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Department = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.ID_Dept == this.ID_Dept);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_Dept;
        }
    }
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class Employee : Entity
    {
        
        private string _atWork;
        
        private EntityRef<Cabinet> _cabinet;
        
        private string _category;
        
        private EntityRef<Department> _department;
        
        private string _email;
        
        private EntityCollection<Examination> _examinations;
        
        private EntityCollection<ExaminationTemplate> _examinationTemplates;
        
        private string _firstName;
        
        private int _id_Cabinet;
        
        private int _id_Dept;
        
        private int _id_Employee;
        
        private Guid _id_User;
        
        private EntityCollection<News> _news;
        
        private string _patronymic;
        
        private string _position;
        
        private int _rate;
        
        private EntityCollection<Referral> _referrals;
        
        private string _specialty;
        
        private string _surname;
        
        private string _username;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAtWorkChanging(string value);
        partial void OnAtWorkChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnID_CabinetChanging(int value);
        partial void OnID_CabinetChanged();
        partial void OnID_DeptChanging(int value);
        partial void OnID_DeptChanged();
        partial void OnID_EmployeeChanging(int value);
        partial void OnID_EmployeeChanged();
        partial void OnID_UserChanging(Guid value);
        partial void OnID_UserChanged();
        partial void OnPatronymicChanging(string value);
        partial void OnPatronymicChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        partial void OnRateChanging(int value);
        partial void OnRateChanged();
        partial void OnSpecialtyChanging(string value);
        partial void OnSpecialtyChanged();
        partial void OnSurnameChanging(string value);
        partial void OnSurnameChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AtWork' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string AtWork
        {
            get
            {
                return this._atWork;
            }
            set
            {
                if ((this._atWork != value))
                {
                    this.OnAtWorkChanging(value);
                    this.RaiseDataMemberChanging("AtWork");
                    this.ValidateProperty("AtWork", value);
                    this._atWork = value;
                    this.RaiseDataMemberChanged("AtWork");
                    this.OnAtWorkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Cabinet"/> entity.
        /// </summary>
        [Association("Cabinet_Employee", "ID_Cabinet", "ID_Cabinet", IsForeignKey=true)]
        [XmlIgnore()]
        public Cabinet Cabinet
        {
            get
            {
                if ((this._cabinet == null))
                {
                    this._cabinet = new EntityRef<Cabinet>(this, "Cabinet", this.FilterCabinet);
                }
                return this._cabinet.Entity;
            }
            set
            {
                Cabinet previous = this.Cabinet;
                if ((previous != value))
                {
                    this.ValidateProperty("Cabinet", value);
                    if ((previous != null))
                    {
                        this._cabinet.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Cabinet = value.ID_Cabinet;
                    }
                    else
                    {
                        this.ID_Cabinet = default(int);
                    }
                    this._cabinet.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Cabinet");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Category' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    this.OnCategoryChanging(value);
                    this.RaiseDataMemberChanging("Category");
                    this.ValidateProperty("Category", value);
                    this._category = value;
                    this.RaiseDataMemberChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Department"/> entity.
        /// </summary>
        [Association("Department_Employee", "ID_Dept", "ID_Dept", IsForeignKey=true)]
        [XmlIgnore()]
        public Department Department
        {
            get
            {
                if ((this._department == null))
                {
                    this._department = new EntityRef<Department>(this, "Department", this.FilterDepartment);
                }
                return this._department.Entity;
            }
            set
            {
                Department previous = this.Department;
                if ((previous != value))
                {
                    this.ValidateProperty("Department", value);
                    if ((previous != null))
                    {
                        this._department.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Dept = value.ID_Dept;
                    }
                    else
                    {
                        this.ID_Dept = default(int);
                    }
                    this._department.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Examination"/> entities.
        /// </summary>
        [Association("Employee_Examination", "ID_Employee", "ID_Employee")]
        [XmlIgnore()]
        public EntityCollection<Examination> Examinations
        {
            get
            {
                if ((this._examinations == null))
                {
                    this._examinations = new EntityCollection<Examination>(this, "Examinations", this.FilterExaminations, this.AttachExaminations, this.DetachExaminations);
                }
                return this._examinations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ExaminationTemplate"/> entities.
        /// </summary>
        [Association("Employee_ExaminationTemplate", "ID_Employee", "EmployeeID_Employee")]
        [XmlIgnore()]
        public EntityCollection<ExaminationTemplate> ExaminationTemplates
        {
            get
            {
                if ((this._examinationTemplates == null))
                {
                    this._examinationTemplates = new EntityCollection<ExaminationTemplate>(this, "ExaminationTemplates", this.FilterExaminationTemplates, this.AttachExaminationTemplates, this.DetachExaminationTemplates);
                }
                return this._examinationTemplates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Cabinet' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Cabinet
        {
            get
            {
                return this._id_Cabinet;
            }
            set
            {
                if ((this._id_Cabinet != value))
                {
                    this.OnID_CabinetChanging(value);
                    this.RaiseDataMemberChanging("ID_Cabinet");
                    this.ValidateProperty("ID_Cabinet", value);
                    this._id_Cabinet = value;
                    this.RaiseDataMemberChanged("ID_Cabinet");
                    this.OnID_CabinetChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Dept' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Dept
        {
            get
            {
                return this._id_Dept;
            }
            set
            {
                if ((this._id_Dept != value))
                {
                    this.OnID_DeptChanging(value);
                    this.RaiseDataMemberChanging("ID_Dept");
                    this.ValidateProperty("ID_Dept", value);
                    this._id_Dept = value;
                    this.RaiseDataMemberChanged("ID_Dept");
                    this.OnID_DeptChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Employee' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_Employee
        {
            get
            {
                return this._id_Employee;
            }
            set
            {
                if ((this._id_Employee != value))
                {
                    this.OnID_EmployeeChanging(value);
                    this.ValidateProperty("ID_Employee", value);
                    this._id_Employee = value;
                    this.RaisePropertyChanged("ID_Employee");
                    this.OnID_EmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_User' value.
        /// </summary>
        [DataMember()]
        public Guid ID_User
        {
            get
            {
                return this._id_User;
            }
            set
            {
                if ((this._id_User != value))
                {
                    this.OnID_UserChanging(value);
                    this.RaiseDataMemberChanging("ID_User");
                    this.ValidateProperty("ID_User", value);
                    this._id_User = value;
                    this.RaiseDataMemberChanged("ID_User");
                    this.OnID_UserChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="News"/> entities.
        /// </summary>
        [Association("Employee_News", "ID_Employee", "ID_Employee")]
        [XmlIgnore()]
        public EntityCollection<News> News
        {
            get
            {
                if ((this._news == null))
                {
                    this._news = new EntityCollection<News>(this, "News", this.FilterNews, this.AttachNews, this.DetachNews);
                }
                return this._news;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Patronymic' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Patronymic
        {
            get
            {
                return this._patronymic;
            }
            set
            {
                if ((this._patronymic != value))
                {
                    this.OnPatronymicChanging(value);
                    this.RaiseDataMemberChanging("Patronymic");
                    this.ValidateProperty("Patronymic", value);
                    this._patronymic = value;
                    this.RaiseDataMemberChanged("Patronymic");
                    this.OnPatronymicChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Position' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Position
        {
            get
            {
                return this._position;
            }
            set
            {
                if ((this._position != value))
                {
                    this.OnPositionChanging(value);
                    this.RaiseDataMemberChanging("Position");
                    this.ValidateProperty("Position", value);
                    this._position = value;
                    this.RaiseDataMemberChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rate' value.
        /// </summary>
        [DataMember()]
        public int Rate
        {
            get
            {
                return this._rate;
            }
            set
            {
                if ((this._rate != value))
                {
                    this.OnRateChanging(value);
                    this.RaiseDataMemberChanging("Rate");
                    this.ValidateProperty("Rate", value);
                    this._rate = value;
                    this.RaiseDataMemberChanged("Rate");
                    this.OnRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Referral"/> entities.
        /// </summary>
        [Association("Employee_Referral", "ID_Employee", "ID_Employee")]
        [XmlIgnore()]
        public EntityCollection<Referral> Referrals
        {
            get
            {
                if ((this._referrals == null))
                {
                    this._referrals = new EntityCollection<Referral>(this, "Referrals", this.FilterReferrals, this.AttachReferrals, this.DetachReferrals);
                }
                return this._referrals;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Specialty' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(30)]
        public string Specialty
        {
            get
            {
                return this._specialty;
            }
            set
            {
                if ((this._specialty != value))
                {
                    this.OnSpecialtyChanging(value);
                    this.RaiseDataMemberChanging("Specialty");
                    this.ValidateProperty("Specialty", value);
                    this._specialty = value;
                    this.RaiseDataMemberChanged("Specialty");
                    this.OnSpecialtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Surname' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Surname
        {
            get
            {
                return this._surname;
            }
            set
            {
                if ((this._surname != value))
                {
                    this.OnSurnameChanging(value);
                    this.RaiseDataMemberChanging("Surname");
                    this.ValidateProperty("Surname", value);
                    this._surname = value;
                    this.RaiseDataMemberChanged("Surname");
                    this.OnSurnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Username' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Username
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnUsernameChanging(value);
                    this.RaiseDataMemberChanging("Username");
                    this.ValidateProperty("Username", value);
                    this._username = value;
                    this.RaiseDataMemberChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
        
        private bool FilterCabinet(Cabinet entity)
        {
            return (entity.ID_Cabinet == this.ID_Cabinet);
        }
        
        private bool FilterDepartment(Department entity)
        {
            return (entity.ID_Dept == this.ID_Dept);
        }
        
        private void AttachExaminations(Examination entity)
        {
            entity.Employee = this;
        }
        
        private void DetachExaminations(Examination entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterExaminations(Examination entity)
        {
            return (entity.ID_Employee == this.ID_Employee);
        }
        
        private void AttachExaminationTemplates(ExaminationTemplate entity)
        {
            entity.Employee = this;
        }
        
        private void DetachExaminationTemplates(ExaminationTemplate entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterExaminationTemplates(ExaminationTemplate entity)
        {
            return (entity.EmployeeID_Employee == this.ID_Employee);
        }
        
        private void AttachNews(News entity)
        {
            entity.Employee = this;
        }
        
        private void DetachNews(News entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterNews(News entity)
        {
            return (entity.ID_Employee == this.ID_Employee);
        }
        
        private void AttachReferrals(Referral entity)
        {
            entity.Employee = this;
        }
        
        private void DetachReferrals(Referral entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterReferrals(Referral entity)
        {
            return (entity.ID_Employee == this.ID_Employee);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_Employee;
        }
    }
    
    /// <summary>
    /// The 'Examination' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class Examination : Entity
    {
        
        private string _conclusion;
        
        private string _consultation;
        
        private EntityRef<Employee> _employee;
        
        private EntityRef<ExaminationType> _examinationType;
        
        private int _examinationType_ID_ExmType;
        
        private int _id_Employee;
        
        private int _id_Examination;
        
        private int _id_ExmType;
        
        private int _id_Patient;
        
        private EntityRef<Patient> _patient;
        
        private string _protocol;
        
        private string _recommendation;
        
        private EntityRef<Referral> _referral;
        
        private Nullable<int> _referral_ID_Referral;
        
        private DateTime _startTime;
        
        private byte _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConclusionChanging(string value);
        partial void OnConclusionChanged();
        partial void OnConsultationChanging(string value);
        partial void OnConsultationChanged();
        partial void OnExaminationType_ID_ExmTypeChanging(int value);
        partial void OnExaminationType_ID_ExmTypeChanged();
        partial void OnID_EmployeeChanging(int value);
        partial void OnID_EmployeeChanged();
        partial void OnID_ExaminationChanging(int value);
        partial void OnID_ExaminationChanged();
        partial void OnID_ExmTypeChanging(int value);
        partial void OnID_ExmTypeChanged();
        partial void OnID_PatientChanging(int value);
        partial void OnID_PatientChanged();
        partial void OnProtocolChanging(string value);
        partial void OnProtocolChanged();
        partial void OnRecommendationChanging(string value);
        partial void OnRecommendationChanged();
        partial void OnReferral_ID_ReferralChanging(Nullable<int> value);
        partial void OnReferral_ID_ReferralChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Examination"/> class.
        /// </summary>
        public Examination()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Conclusion' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Conclusion
        {
            get
            {
                return this._conclusion;
            }
            set
            {
                if ((this._conclusion != value))
                {
                    this.OnConclusionChanging(value);
                    this.RaiseDataMemberChanging("Conclusion");
                    this.ValidateProperty("Conclusion", value);
                    this._conclusion = value;
                    this.RaiseDataMemberChanged("Conclusion");
                    this.OnConclusionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Consultation' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Consultation
        {
            get
            {
                return this._consultation;
            }
            set
            {
                if ((this._consultation != value))
                {
                    this.OnConsultationChanging(value);
                    this.RaiseDataMemberChanging("Consultation");
                    this.ValidateProperty("Consultation", value);
                    this._consultation = value;
                    this.RaiseDataMemberChanged("Consultation");
                    this.OnConsultationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Examination", "ID_Employee", "ID_Employee", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Examinations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Employee = value.ID_Employee;
                    }
                    else
                    {
                        this.ID_Employee = default(int);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Examinations.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ExaminationType"/> entity.
        /// </summary>
        [Association("ExaminationType_Examination", "ExaminationType_ID_ExmType", "ID_ExmType", IsForeignKey=true)]
        [XmlIgnore()]
        public ExaminationType ExaminationType
        {
            get
            {
                if ((this._examinationType == null))
                {
                    this._examinationType = new EntityRef<ExaminationType>(this, "ExaminationType", this.FilterExaminationType);
                }
                return this._examinationType.Entity;
            }
            set
            {
                ExaminationType previous = this.ExaminationType;
                if ((previous != value))
                {
                    this.ValidateProperty("ExaminationType", value);
                    if ((previous != null))
                    {
                        this._examinationType.Entity = null;
                        previous.Examinations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ExaminationType_ID_ExmType = value.ID_ExmType;
                    }
                    else
                    {
                        this.ExaminationType_ID_ExmType = default(int);
                    }
                    this._examinationType.Entity = value;
                    if ((value != null))
                    {
                        value.Examinations.Add(this);
                    }
                    this.RaisePropertyChanged("ExaminationType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationType_ID_ExmType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ExaminationType_ID_ExmType
        {
            get
            {
                return this._examinationType_ID_ExmType;
            }
            set
            {
                if ((this._examinationType_ID_ExmType != value))
                {
                    this.OnExaminationType_ID_ExmTypeChanging(value);
                    this.RaiseDataMemberChanging("ExaminationType_ID_ExmType");
                    this.ValidateProperty("ExaminationType_ID_ExmType", value);
                    this._examinationType_ID_ExmType = value;
                    this.RaiseDataMemberChanged("ExaminationType_ID_ExmType");
                    this.OnExaminationType_ID_ExmTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Employee' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Employee
        {
            get
            {
                return this._id_Employee;
            }
            set
            {
                if ((this._id_Employee != value))
                {
                    this.OnID_EmployeeChanging(value);
                    this.RaiseDataMemberChanging("ID_Employee");
                    this.ValidateProperty("ID_Employee", value);
                    this._id_Employee = value;
                    this.RaiseDataMemberChanged("ID_Employee");
                    this.OnID_EmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Examination' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_Examination
        {
            get
            {
                return this._id_Examination;
            }
            set
            {
                if ((this._id_Examination != value))
                {
                    this.OnID_ExaminationChanging(value);
                    this.ValidateProperty("ID_Examination", value);
                    this._id_Examination = value;
                    this.RaisePropertyChanged("ID_Examination");
                    this.OnID_ExaminationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_ExmType' value.
        /// </summary>
        [DataMember()]
        public int ID_ExmType
        {
            get
            {
                return this._id_ExmType;
            }
            set
            {
                if ((this._id_ExmType != value))
                {
                    this.OnID_ExmTypeChanging(value);
                    this.RaiseDataMemberChanging("ID_ExmType");
                    this.ValidateProperty("ID_ExmType", value);
                    this._id_ExmType = value;
                    this.RaiseDataMemberChanged("ID_ExmType");
                    this.OnID_ExmTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Patient' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Patient
        {
            get
            {
                return this._id_Patient;
            }
            set
            {
                if ((this._id_Patient != value))
                {
                    this.OnID_PatientChanging(value);
                    this.RaiseDataMemberChanging("ID_Patient");
                    this.ValidateProperty("ID_Patient", value);
                    this._id_Patient = value;
                    this.RaiseDataMemberChanged("ID_Patient");
                    this.OnID_PatientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Patient"/> entity.
        /// </summary>
        [Association("Patient_Examination", "ID_Patient", "ID_Patient", IsForeignKey=true)]
        [XmlIgnore()]
        public Patient Patient
        {
            get
            {
                if ((this._patient == null))
                {
                    this._patient = new EntityRef<Patient>(this, "Patient", this.FilterPatient);
                }
                return this._patient.Entity;
            }
            set
            {
                Patient previous = this.Patient;
                if ((previous != value))
                {
                    this.ValidateProperty("Patient", value);
                    if ((previous != null))
                    {
                        this._patient.Entity = null;
                        previous.Examinations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Patient = value.ID_Patient;
                    }
                    else
                    {
                        this.ID_Patient = default(int);
                    }
                    this._patient.Entity = value;
                    if ((value != null))
                    {
                        value.Examinations.Add(this);
                    }
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Protocol' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Protocol
        {
            get
            {
                return this._protocol;
            }
            set
            {
                if ((this._protocol != value))
                {
                    this.OnProtocolChanging(value);
                    this.RaiseDataMemberChanging("Protocol");
                    this.ValidateProperty("Protocol", value);
                    this._protocol = value;
                    this.RaiseDataMemberChanged("Protocol");
                    this.OnProtocolChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Recommendation' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Recommendation
        {
            get
            {
                return this._recommendation;
            }
            set
            {
                if ((this._recommendation != value))
                {
                    this.OnRecommendationChanging(value);
                    this.RaiseDataMemberChanging("Recommendation");
                    this.ValidateProperty("Recommendation", value);
                    this._recommendation = value;
                    this.RaiseDataMemberChanged("Recommendation");
                    this.OnRecommendationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Referral"/> entity.
        /// </summary>
        [Association("Referral_Examination", "Referral_ID_Referral", "ID_Referral", IsForeignKey=true)]
        [XmlIgnore()]
        public Referral Referral
        {
            get
            {
                if ((this._referral == null))
                {
                    this._referral = new EntityRef<Referral>(this, "Referral", this.FilterReferral);
                }
                return this._referral.Entity;
            }
            set
            {
                Referral previous = this.Referral;
                if ((previous != value))
                {
                    this.ValidateProperty("Referral", value);
                    if ((previous != null))
                    {
                        this._referral.Entity = null;
                        previous.Examinations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Referral_ID_Referral = value.ID_Referral;
                    }
                    else
                    {
                        this.Referral_ID_Referral = default(Nullable<int>);
                    }
                    this._referral.Entity = value;
                    if ((value != null))
                    {
                        value.Examinations.Add(this);
                    }
                    this.RaisePropertyChanged("Referral");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Referral_ID_Referral' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> Referral_ID_Referral
        {
            get
            {
                return this._referral_ID_Referral;
            }
            set
            {
                if ((this._referral_ID_Referral != value))
                {
                    this.OnReferral_ID_ReferralChanging(value);
                    this.RaiseDataMemberChanging("Referral_ID_Referral");
                    this.ValidateProperty("Referral_ID_Referral", value);
                    this._referral_ID_Referral = value;
                    this.RaiseDataMemberChanged("Referral_ID_Referral");
                    this.OnReferral_ID_ReferralChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartTime' value.
        /// </summary>
        [DataMember()]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.ID_Employee == this.ID_Employee);
        }
        
        private bool FilterExaminationType(ExaminationType entity)
        {
            return (entity.ID_ExmType == this.ExaminationType_ID_ExmType);
        }
        
        private bool FilterPatient(Patient entity)
        {
            return (entity.ID_Patient == this.ID_Patient);
        }
        
        private bool FilterReferral(Referral entity)
        {
            return (entity.ID_Referral == this.Referral_ID_Referral);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_Examination;
        }
    }
    
    /// <summary>
    /// The 'ExaminationTemplate' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class ExaminationTemplate : Entity
    {
        
        private string _body;
        
        private EntityRef<Employee> _employee;
        
        private int _employeeID_Employee;
        
        private EntityRef<ExaminationType> _examinationType;
        
        private int _examinationTypeID_ExmType;
        
        private int _id;
        
        private bool _isPrivate;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnEmployeeID_EmployeeChanging(int value);
        partial void OnEmployeeID_EmployeeChanged();
        partial void OnExaminationTypeID_ExmTypeChanging(int value);
        partial void OnExaminationTypeID_ExmTypeChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIsPrivateChanging(bool value);
        partial void OnIsPrivateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExaminationTemplate"/> class.
        /// </summary>
        public ExaminationTemplate()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Body' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Body
        {
            get
            {
                return this._body;
            }
            set
            {
                if ((this._body != value))
                {
                    this.OnBodyChanging(value);
                    this.RaiseDataMemberChanging("Body");
                    this.ValidateProperty("Body", value);
                    this._body = value;
                    this.RaiseDataMemberChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_ExaminationTemplate", "EmployeeID_Employee", "ID_Employee", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.ExaminationTemplates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EmployeeID_Employee = value.ID_Employee;
                    }
                    else
                    {
                        this.EmployeeID_Employee = default(int);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.ExaminationTemplates.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID_Employee' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int EmployeeID_Employee
        {
            get
            {
                return this._employeeID_Employee;
            }
            set
            {
                if ((this._employeeID_Employee != value))
                {
                    this.OnEmployeeID_EmployeeChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID_Employee");
                    this.ValidateProperty("EmployeeID_Employee", value);
                    this._employeeID_Employee = value;
                    this.RaiseDataMemberChanged("EmployeeID_Employee");
                    this.OnEmployeeID_EmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ExaminationType"/> entity.
        /// </summary>
        [Association("ExaminationType_ExaminationTemplate", "ExaminationTypeID_ExmType", "ID_ExmType", IsForeignKey=true)]
        [XmlIgnore()]
        public ExaminationType ExaminationType
        {
            get
            {
                if ((this._examinationType == null))
                {
                    this._examinationType = new EntityRef<ExaminationType>(this, "ExaminationType", this.FilterExaminationType);
                }
                return this._examinationType.Entity;
            }
            set
            {
                ExaminationType previous = this.ExaminationType;
                if ((previous != value))
                {
                    this.ValidateProperty("ExaminationType", value);
                    if ((previous != null))
                    {
                        this._examinationType.Entity = null;
                        previous.ExaminationTemplates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ExaminationTypeID_ExmType = value.ID_ExmType;
                    }
                    else
                    {
                        this.ExaminationTypeID_ExmType = default(int);
                    }
                    this._examinationType.Entity = value;
                    if ((value != null))
                    {
                        value.ExaminationTemplates.Add(this);
                    }
                    this.RaisePropertyChanged("ExaminationType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationTypeID_ExmType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ExaminationTypeID_ExmType
        {
            get
            {
                return this._examinationTypeID_ExmType;
            }
            set
            {
                if ((this._examinationTypeID_ExmType != value))
                {
                    this.OnExaminationTypeID_ExmTypeChanging(value);
                    this.RaiseDataMemberChanging("ExaminationTypeID_ExmType");
                    this.ValidateProperty("ExaminationTypeID_ExmType", value);
                    this._examinationTypeID_ExmType = value;
                    this.RaiseDataMemberChanged("ExaminationTypeID_ExmType");
                    this.OnExaminationTypeID_ExmTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsPrivate' value.
        /// </summary>
        [DataMember()]
        public bool IsPrivate
        {
            get
            {
                return this._isPrivate;
            }
            set
            {
                if ((this._isPrivate != value))
                {
                    this.OnIsPrivateChanging(value);
                    this.RaiseDataMemberChanging("IsPrivate");
                    this.ValidateProperty("IsPrivate", value);
                    this._isPrivate = value;
                    this.RaiseDataMemberChanged("IsPrivate");
                    this.OnIsPrivateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.ID_Employee == this.EmployeeID_Employee);
        }
        
        private bool FilterExaminationType(ExaminationType entity)
        {
            return (entity.ID_ExmType == this.ExaminationTypeID_ExmType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ExaminationType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class ExaminationType : Entity
    {
        
        private string _description;
        
        private int _duration;
        
        private EntityCollection<Examination> _examinations;
        
        private EntityCollection<ExaminationTemplate> _examinationTemplates;
        
        private int _id_ExmType;
        
        private string _name;
        
        private double _price;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDurationChanging(int value);
        partial void OnDurationChanged();
        partial void OnID_ExmTypeChanging(int value);
        partial void OnID_ExmTypeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPriceChanging(double value);
        partial void OnPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExaminationType"/> class.
        /// </summary>
        public ExaminationType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Duration' value.
        /// </summary>
        [DataMember()]
        public int Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    this.OnDurationChanging(value);
                    this.RaiseDataMemberChanging("Duration");
                    this.ValidateProperty("Duration", value);
                    this._duration = value;
                    this.RaiseDataMemberChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Examination"/> entities.
        /// </summary>
        [Association("ExaminationType_Examination", "ID_ExmType", "ExaminationType_ID_ExmType")]
        [XmlIgnore()]
        public EntityCollection<Examination> Examinations
        {
            get
            {
                if ((this._examinations == null))
                {
                    this._examinations = new EntityCollection<Examination>(this, "Examinations", this.FilterExaminations, this.AttachExaminations, this.DetachExaminations);
                }
                return this._examinations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ExaminationTemplate"/> entities.
        /// </summary>
        [Association("ExaminationType_ExaminationTemplate", "ID_ExmType", "ExaminationTypeID_ExmType")]
        [XmlIgnore()]
        public EntityCollection<ExaminationTemplate> ExaminationTemplates
        {
            get
            {
                if ((this._examinationTemplates == null))
                {
                    this._examinationTemplates = new EntityCollection<ExaminationTemplate>(this, "ExaminationTemplates", this.FilterExaminationTemplates, this.AttachExaminationTemplates, this.DetachExaminationTemplates);
                }
                return this._examinationTemplates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_ExmType' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_ExmType
        {
            get
            {
                return this._id_ExmType;
            }
            set
            {
                if ((this._id_ExmType != value))
                {
                    this.OnID_ExmTypeChanging(value);
                    this.ValidateProperty("ID_ExmType", value);
                    this._id_ExmType = value;
                    this.RaisePropertyChanged("ID_ExmType");
                    this.OnID_ExmTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Price' value.
        /// </summary>
        [DataMember()]
        public double Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnPriceChanging(value);
                    this.RaiseDataMemberChanging("Price");
                    this.ValidateProperty("Price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
        
        private void AttachExaminations(Examination entity)
        {
            entity.ExaminationType = this;
        }
        
        private void DetachExaminations(Examination entity)
        {
            entity.ExaminationType = null;
        }
        
        private bool FilterExaminations(Examination entity)
        {
            return (entity.ExaminationType_ID_ExmType == this.ID_ExmType);
        }
        
        private void AttachExaminationTemplates(ExaminationTemplate entity)
        {
            entity.ExaminationType = this;
        }
        
        private void DetachExaminationTemplates(ExaminationTemplate entity)
        {
            entity.ExaminationType = null;
        }
        
        private bool FilterExaminationTemplates(ExaminationTemplate entity)
        {
            return (entity.ExaminationTypeID_ExmType == this.ID_ExmType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_ExmType;
        }
    }
    
    /// <summary>
    /// The 'News' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class News : Entity
    {
        
        private EntityRef<Employee> _employee;
        
        private int _id_Dept;
        
        private int _id_Employee;
        
        private int _id_News;
        
        private string _text;
        
        private string _topic;
        
        private byte _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnID_DeptChanging(int value);
        partial void OnID_DeptChanged();
        partial void OnID_EmployeeChanging(int value);
        partial void OnID_EmployeeChanged();
        partial void OnID_NewsChanging(int value);
        partial void OnID_NewsChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnTopicChanging(string value);
        partial void OnTopicChanged();
        partial void OnTypeChanging(byte value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="News"/> class.
        /// </summary>
        public News()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_News", "ID_Employee", "ID_Employee", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.News.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Employee = value.ID_Employee;
                    }
                    else
                    {
                        this.ID_Employee = default(int);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.News.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Dept' value.
        /// </summary>
        [DataMember()]
        public int ID_Dept
        {
            get
            {
                return this._id_Dept;
            }
            set
            {
                if ((this._id_Dept != value))
                {
                    this.OnID_DeptChanging(value);
                    this.RaiseDataMemberChanging("ID_Dept");
                    this.ValidateProperty("ID_Dept", value);
                    this._id_Dept = value;
                    this.RaiseDataMemberChanged("ID_Dept");
                    this.OnID_DeptChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Employee' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Employee
        {
            get
            {
                return this._id_Employee;
            }
            set
            {
                if ((this._id_Employee != value))
                {
                    this.OnID_EmployeeChanging(value);
                    this.RaiseDataMemberChanging("ID_Employee");
                    this.ValidateProperty("ID_Employee", value);
                    this._id_Employee = value;
                    this.RaiseDataMemberChanged("ID_Employee");
                    this.OnID_EmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_News' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_News
        {
            get
            {
                return this._id_News;
            }
            set
            {
                if ((this._id_News != value))
                {
                    this.OnID_NewsChanging(value);
                    this.ValidateProperty("ID_News", value);
                    this._id_News = value;
                    this.RaisePropertyChanged("ID_News");
                    this.OnID_NewsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Topic' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Topic
        {
            get
            {
                return this._topic;
            }
            set
            {
                if ((this._topic != value))
                {
                    this.OnTopicChanging(value);
                    this.RaiseDataMemberChanging("Topic");
                    this.ValidateProperty("Topic", value);
                    this._topic = value;
                    this.RaiseDataMemberChanged("Topic");
                    this.OnTopicChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public byte Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.ID_Employee == this.ID_Employee);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_News;
        }
    }
    
    /// <summary>
    /// The 'Patient' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class Patient : Entity
    {
        
        private string _address;
        
        private DateTime _birthDate;
        
        private string _city;
        
        private bool _civil_Servant;
        
        private string _comment;
        
        private string _email;
        
        private EntityCollection<Examination> _examinations;
        
        private string _firstName;
        
        private int _id_Patient;
        
        private string _password;
        
        private string _patronymic;
        
        private string _phone;
        
        private EntityCollection<Referral> _referrals;
        
        private string _sex;
        
        private string _specialty;
        
        private string _surname;
        
        private bool _workplace;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnBirthDateChanging(DateTime value);
        partial void OnBirthDateChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCivil_ServantChanging(bool value);
        partial void OnCivil_ServantChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnID_PatientChanging(int value);
        partial void OnID_PatientChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPatronymicChanging(string value);
        partial void OnPatronymicChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnSexChanging(string value);
        partial void OnSexChanged();
        partial void OnSpecialtyChanging(string value);
        partial void OnSpecialtyChanged();
        partial void OnSurnameChanging(string value);
        partial void OnSurnameChanged();
        partial void OnWorkplaceChanging(bool value);
        partial void OnWorkplaceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient"/> class.
        /// </summary>
        public Patient()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BirthDate' value.
        /// </summary>
        [DataMember()]
        public DateTime BirthDate
        {
            get
            {
                return this._birthDate;
            }
            set
            {
                if ((this._birthDate != value))
                {
                    this.OnBirthDateChanging(value);
                    this.RaiseDataMemberChanging("BirthDate");
                    this.ValidateProperty("BirthDate", value);
                    this._birthDate = value;
                    this.RaiseDataMemberChanged("BirthDate");
                    this.OnBirthDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Civil_Servant' value.
        /// </summary>
        [DataMember()]
        public bool Civil_Servant
        {
            get
            {
                return this._civil_Servant;
            }
            set
            {
                if ((this._civil_Servant != value))
                {
                    this.OnCivil_ServantChanging(value);
                    this.RaiseDataMemberChanging("Civil_Servant");
                    this.ValidateProperty("Civil_Servant", value);
                    this._civil_Servant = value;
                    this.RaiseDataMemberChanged("Civil_Servant");
                    this.OnCivil_ServantChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Comment' value.
        /// </summary>
        [DataMember()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    this.OnCommentChanging(value);
                    this.RaiseDataMemberChanging("Comment");
                    this.ValidateProperty("Comment", value);
                    this._comment = value;
                    this.RaiseDataMemberChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Examination"/> entities.
        /// </summary>
        [Association("Patient_Examination", "ID_Patient", "ID_Patient")]
        [XmlIgnore()]
        public EntityCollection<Examination> Examinations
        {
            get
            {
                if ((this._examinations == null))
                {
                    this._examinations = new EntityCollection<Examination>(this, "Examinations", this.FilterExaminations, this.AttachExaminations, this.DetachExaminations);
                }
                return this._examinations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Patient' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_Patient
        {
            get
            {
                return this._id_Patient;
            }
            set
            {
                if ((this._id_Patient != value))
                {
                    this.OnID_PatientChanging(value);
                    this.ValidateProperty("ID_Patient", value);
                    this._id_Patient = value;
                    this.RaisePropertyChanged("ID_Patient");
                    this.OnID_PatientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(16)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Patronymic' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Patronymic
        {
            get
            {
                return this._patronymic;
            }
            set
            {
                if ((this._patronymic != value))
                {
                    this.OnPatronymicChanging(value);
                    this.RaiseDataMemberChanging("Patronymic");
                    this.ValidateProperty("Patronymic", value);
                    this._patronymic = value;
                    this.RaiseDataMemberChanged("Patronymic");
                    this.OnPatronymicChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Referral"/> entities.
        /// </summary>
        [Association("Patient_Referral", "ID_Patient", "ID_Patient")]
        [XmlIgnore()]
        public EntityCollection<Referral> Referrals
        {
            get
            {
                if ((this._referrals == null))
                {
                    this._referrals = new EntityCollection<Referral>(this, "Referrals", this.FilterReferrals, this.AttachReferrals, this.DetachReferrals);
                }
                return this._referrals;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sex' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string Sex
        {
            get
            {
                return this._sex;
            }
            set
            {
                if ((this._sex != value))
                {
                    this.OnSexChanging(value);
                    this.RaiseDataMemberChanging("Sex");
                    this.ValidateProperty("Sex", value);
                    this._sex = value;
                    this.RaiseDataMemberChanged("Sex");
                    this.OnSexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Specialty' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Specialty
        {
            get
            {
                return this._specialty;
            }
            set
            {
                if ((this._specialty != value))
                {
                    this.OnSpecialtyChanging(value);
                    this.RaiseDataMemberChanging("Specialty");
                    this.ValidateProperty("Specialty", value);
                    this._specialty = value;
                    this.RaiseDataMemberChanged("Specialty");
                    this.OnSpecialtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Surname' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Surname
        {
            get
            {
                return this._surname;
            }
            set
            {
                if ((this._surname != value))
                {
                    this.OnSurnameChanging(value);
                    this.RaiseDataMemberChanging("Surname");
                    this.ValidateProperty("Surname", value);
                    this._surname = value;
                    this.RaiseDataMemberChanged("Surname");
                    this.OnSurnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Workplace' value.
        /// </summary>
        [DataMember()]
        public bool Workplace
        {
            get
            {
                return this._workplace;
            }
            set
            {
                if ((this._workplace != value))
                {
                    this.OnWorkplaceChanging(value);
                    this.RaiseDataMemberChanging("Workplace");
                    this.ValidateProperty("Workplace", value);
                    this._workplace = value;
                    this.RaiseDataMemberChanged("Workplace");
                    this.OnWorkplaceChanged();
                }
            }
        }
        
        private void AttachExaminations(Examination entity)
        {
            entity.Patient = this;
        }
        
        private void DetachExaminations(Examination entity)
        {
            entity.Patient = null;
        }
        
        private bool FilterExaminations(Examination entity)
        {
            return (entity.ID_Patient == this.ID_Patient);
        }
        
        private void AttachReferrals(Referral entity)
        {
            entity.Patient = this;
        }
        
        private void DetachReferrals(Referral entity)
        {
            entity.Patient = null;
        }
        
        private bool FilterReferrals(Referral entity)
        {
            return (entity.ID_Patient == this.ID_Patient);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_Patient;
        }
    }
    
    /// <summary>
    /// The 'Referral' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DCExternalSite.Web.Models")]
    public sealed partial class Referral : Entity
    {
        
        private DateTime _creationDate;
        
        private EntityRef<Employee> _employee;
        
        private EntityCollection<Examination> _examinations;
        
        private int _id_Employee;
        
        private Nullable<int> _id_Examination;
        
        private int _id_Patient;
        
        private int _id_Referral;
        
        private EntityRef<Patient> _patient;
        
        private DateTime _visitDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreationDateChanging(DateTime value);
        partial void OnCreationDateChanged();
        partial void OnID_EmployeeChanging(int value);
        partial void OnID_EmployeeChanged();
        partial void OnID_ExaminationChanging(Nullable<int> value);
        partial void OnID_ExaminationChanged();
        partial void OnID_PatientChanging(int value);
        partial void OnID_PatientChanged();
        partial void OnID_ReferralChanging(int value);
        partial void OnID_ReferralChanged();
        partial void OnVisitDateChanging(DateTime value);
        partial void OnVisitDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Referral"/> class.
        /// </summary>
        public Referral()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CreationDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreationDate
        {
            get
            {
                return this._creationDate;
            }
            set
            {
                if ((this._creationDate != value))
                {
                    this.OnCreationDateChanging(value);
                    this.RaiseDataMemberChanging("CreationDate");
                    this.ValidateProperty("CreationDate", value);
                    this._creationDate = value;
                    this.RaiseDataMemberChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Referral", "ID_Employee", "ID_Employee", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Referrals.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Employee = value.ID_Employee;
                    }
                    else
                    {
                        this.ID_Employee = default(int);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Referrals.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Examination"/> entities.
        /// </summary>
        [Association("Referral_Examination", "ID_Referral", "Referral_ID_Referral")]
        [XmlIgnore()]
        public EntityCollection<Examination> Examinations
        {
            get
            {
                if ((this._examinations == null))
                {
                    this._examinations = new EntityCollection<Examination>(this, "Examinations", this.FilterExaminations, this.AttachExaminations, this.DetachExaminations);
                }
                return this._examinations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Employee' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Employee
        {
            get
            {
                return this._id_Employee;
            }
            set
            {
                if ((this._id_Employee != value))
                {
                    this.OnID_EmployeeChanging(value);
                    this.RaiseDataMemberChanging("ID_Employee");
                    this.ValidateProperty("ID_Employee", value);
                    this._id_Employee = value;
                    this.RaiseDataMemberChanged("ID_Employee");
                    this.OnID_EmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Examination' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ID_Examination
        {
            get
            {
                return this._id_Examination;
            }
            set
            {
                if ((this._id_Examination != value))
                {
                    this.OnID_ExaminationChanging(value);
                    this.RaiseDataMemberChanging("ID_Examination");
                    this.ValidateProperty("ID_Examination", value);
                    this._id_Examination = value;
                    this.RaiseDataMemberChanged("ID_Examination");
                    this.OnID_ExaminationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Patient' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ID_Patient
        {
            get
            {
                return this._id_Patient;
            }
            set
            {
                if ((this._id_Patient != value))
                {
                    this.OnID_PatientChanging(value);
                    this.RaiseDataMemberChanging("ID_Patient");
                    this.ValidateProperty("ID_Patient", value);
                    this._id_Patient = value;
                    this.RaiseDataMemberChanged("ID_Patient");
                    this.OnID_PatientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID_Referral' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID_Referral
        {
            get
            {
                return this._id_Referral;
            }
            set
            {
                if ((this._id_Referral != value))
                {
                    this.OnID_ReferralChanging(value);
                    this.ValidateProperty("ID_Referral", value);
                    this._id_Referral = value;
                    this.RaisePropertyChanged("ID_Referral");
                    this.OnID_ReferralChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Patient"/> entity.
        /// </summary>
        [Association("Patient_Referral", "ID_Patient", "ID_Patient", IsForeignKey=true)]
        [XmlIgnore()]
        public Patient Patient
        {
            get
            {
                if ((this._patient == null))
                {
                    this._patient = new EntityRef<Patient>(this, "Patient", this.FilterPatient);
                }
                return this._patient.Entity;
            }
            set
            {
                Patient previous = this.Patient;
                if ((previous != value))
                {
                    this.ValidateProperty("Patient", value);
                    if ((previous != null))
                    {
                        this._patient.Entity = null;
                        previous.Referrals.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ID_Patient = value.ID_Patient;
                    }
                    else
                    {
                        this.ID_Patient = default(int);
                    }
                    this._patient.Entity = value;
                    if ((value != null))
                    {
                        value.Referrals.Add(this);
                    }
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VisitDate' value.
        /// </summary>
        [DataMember()]
        public DateTime VisitDate
        {
            get
            {
                return this._visitDate;
            }
            set
            {
                if ((this._visitDate != value))
                {
                    this.OnVisitDateChanging(value);
                    this.RaiseDataMemberChanging("VisitDate");
                    this.ValidateProperty("VisitDate", value);
                    this._visitDate = value;
                    this.RaiseDataMemberChanged("VisitDate");
                    this.OnVisitDateChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.ID_Employee == this.ID_Employee);
        }
        
        private void AttachExaminations(Examination entity)
        {
            entity.Referral = this;
        }
        
        private void DetachExaminations(Examination entity)
        {
            entity.Referral = null;
        }
        
        private bool FilterExaminations(Examination entity)
        {
            return (entity.Referral_ID_Referral == this.ID_Referral);
        }
        
        private bool FilterPatient(Patient entity)
        {
            return (entity.ID_Patient == this.ID_Patient);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id_Referral;
        }
    }
}
namespace DCExternalSite.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using DCExternalSite.Web.Models;
    
    
    /// <summary>
    /// The domain context corresponding to the 'DCDomainService' domain service.
    /// </summary>
    public sealed partial class DCDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DCDomainContext"/> class.
        /// </summary>
        public DCDomainContext() : 
                this(new WebDomainClient<IDCDomainServiceContract>(new Uri("DCExternalSite-Web-Services-DCDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DCDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DCDomainService service URI.</param>
        public DCDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IDCDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DCDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public DCDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Cabinet"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<Cabinet> Cabinets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Cabinet>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Day"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<Day> Days
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Day>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Department"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<Department> Departments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Department>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Examination"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<Examination> Examinations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Examination>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ExaminationTemplate"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<ExaminationTemplate> ExaminationTemplates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ExaminationTemplate>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ExaminationType"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<ExaminationType> ExaminationTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ExaminationType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="News"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<News> News
        {
            get
            {
                return base.EntityContainer.GetEntitySet<News>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Patient"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<Patient> Patients
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Patient>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Referral"/> entities that have been loaded into this <see cref="DCDomainContext"/> instance.
        /// </summary>
        public EntitySet<Referral> Referrals
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Referral>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Cabinet"/> entities using the 'GetCabinets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Cabinet"/> entities.</returns>
        public EntityQuery<Cabinet> GetCabinetsQuery()
        {
            this.ValidateMethod("GetCabinetsQuery", null);
            return base.CreateQuery<Cabinet>("GetCabinets", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Day"/> entities using the 'GetDays' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Day"/> entities.</returns>
        public EntityQuery<Day> GetDaysQuery()
        {
            this.ValidateMethod("GetDaysQuery", null);
            return base.CreateQuery<Day>("GetDays", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Department"/> entities using the 'GetDepartments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Department"/> entities.</returns>
        public EntityQuery<Department> GetDepartmentsQuery()
        {
            this.ValidateMethod("GetDepartmentsQuery", null);
            return base.CreateQuery<Department>("GetDepartments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entities using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entities.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Examination"/> entities using the 'GetExaminations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Examination"/> entities.</returns>
        public EntityQuery<Examination> GetExaminationsQuery()
        {
            this.ValidateMethod("GetExaminationsQuery", null);
            return base.CreateQuery<Examination>("GetExaminations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Examination"/> entities using the 'GetExaminationsByID_Patient' query.
        /// </summary>
        /// <param name="ID_Patient">The value for the 'ID_Patient' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Examination"/> entities.</returns>
        public EntityQuery<Examination> GetExaminationsByID_PatientQuery(int ID_Patient)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ID_Patient", ID_Patient);
            this.ValidateMethod("GetExaminationsByID_PatientQuery", parameters);
            return base.CreateQuery<Examination>("GetExaminationsByID_Patient", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExaminationTemplate"/> entities using the 'GetExaminationTemplates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExaminationTemplate"/> entities.</returns>
        public EntityQuery<ExaminationTemplate> GetExaminationTemplatesQuery()
        {
            this.ValidateMethod("GetExaminationTemplatesQuery", null);
            return base.CreateQuery<ExaminationTemplate>("GetExaminationTemplates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExaminationType"/> entities using the 'GetExaminationTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExaminationType"/> entities.</returns>
        public EntityQuery<ExaminationType> GetExaminationTypesQuery()
        {
            this.ValidateMethod("GetExaminationTypesQuery", null);
            return base.CreateQuery<ExaminationType>("GetExaminationTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="News"/> entities using the 'GetNews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="News"/> entities.</returns>
        public EntityQuery<News> GetNewsQuery()
        {
            this.ValidateMethod("GetNewsQuery", null);
            return base.CreateQuery<News>("GetNews", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Patient"/> entities using the 'GetPatientById' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Patient"/> entities.</returns>
        public EntityQuery<Patient> GetPatientByIdQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetPatientByIdQuery", parameters);
            return base.CreateQuery<Patient>("GetPatientById", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Patient"/> entities using the 'GetPatients' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Patient"/> entities.</returns>
        public EntityQuery<Patient> GetPatientsQuery()
        {
            this.ValidateMethod("GetPatientsQuery", null);
            return base.CreateQuery<Patient>("GetPatients", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Referral"/> entities using the 'GetReferrals' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Referral"/> entities.</returns>
        public EntityQuery<Referral> GetReferralsQuery()
        {
            this.ValidateMethod("GetReferralsQuery", null);
            return base.CreateQuery<Referral>("GetReferrals", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Patient"/> entities using the 'GetUserByEmail' query.
        /// </summary>
        /// <param name="email">The value for the 'email' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Patient"/> entities.</returns>
        public EntityQuery<Patient> GetUserByEmailQuery(string email)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("email", email);
            this.ValidateMethod("GetUserByEmailQuery", parameters);
            return base.CreateQuery<Patient>("GetUserByEmail", parameters, false, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DCDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DCDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IDCDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCabinets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetCabinetsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetCabinets", ReplyAction="http://tempuri.org/DCDomainService/GetCabinetsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCabinets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCabinets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCabinets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCabinets' operation.</returns>
            QueryResult<Cabinet> EndGetCabinets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDays' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetDaysDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetDays", ReplyAction="http://tempuri.org/DCDomainService/GetDaysResponse")]
            [WebGet()]
            IAsyncResult BeginGetDays(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDays'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDays'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDays' operation.</returns>
            QueryResult<Day> EndGetDays(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDepartments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetDepartmentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetDepartments", ReplyAction="http://tempuri.org/DCDomainService/GetDepartmentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDepartments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDepartments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDepartments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDepartments' operation.</returns>
            QueryResult<Department> EndGetDepartments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetEmployeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetEmployees", ReplyAction="http://tempuri.org/DCDomainService/GetEmployeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExaminations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetExaminationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetExaminations", ReplyAction="http://tempuri.org/DCDomainService/GetExaminationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetExaminations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExaminations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExaminations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExaminations' operation.</returns>
            QueryResult<Examination> EndGetExaminations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExaminationsByID_Patient' operation.
            /// </summary>
            /// <param name="ID_Patient">The value for the 'ID_Patient' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetExaminationsByID_PatientDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetExaminationsByID_Patient", ReplyAction="http://tempuri.org/DCDomainService/GetExaminationsByID_PatientResponse")]
            [WebGet()]
            IAsyncResult BeginGetExaminationsByID_Patient(int ID_Patient, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExaminationsByID_Patient'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExaminationsByID_Patient'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExaminationsByID_Patient' operation.</returns>
            QueryResult<Examination> EndGetExaminationsByID_Patient(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExaminationTemplates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetExaminationTemplatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetExaminationTemplates", ReplyAction="http://tempuri.org/DCDomainService/GetExaminationTemplatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetExaminationTemplates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExaminationTemplates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExaminationTemplates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExaminationTemplates' operation.</returns>
            QueryResult<ExaminationTemplate> EndGetExaminationTemplates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExaminationTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetExaminationTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetExaminationTypes", ReplyAction="http://tempuri.org/DCDomainService/GetExaminationTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetExaminationTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExaminationTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExaminationTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExaminationTypes' operation.</returns>
            QueryResult<ExaminationType> EndGetExaminationTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetNewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetNews", ReplyAction="http://tempuri.org/DCDomainService/GetNewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNews' operation.</returns>
            QueryResult<News> EndGetNews(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPatientById' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetPatientByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetPatientById", ReplyAction="http://tempuri.org/DCDomainService/GetPatientByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetPatientById(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPatientById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPatientById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPatientById' operation.</returns>
            QueryResult<Patient> EndGetPatientById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPatients' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetPatientsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetPatients", ReplyAction="http://tempuri.org/DCDomainService/GetPatientsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPatients(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPatients'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPatients'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPatients' operation.</returns>
            QueryResult<Patient> EndGetPatients(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReferrals' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetReferralsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetReferrals", ReplyAction="http://tempuri.org/DCDomainService/GetReferralsResponse")]
            [WebGet()]
            IAsyncResult BeginGetReferrals(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReferrals'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReferrals'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReferrals' operation.</returns>
            QueryResult<Referral> EndGetReferrals(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserByEmail' operation.
            /// </summary>
            /// <param name="email">The value for the 'email' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/GetUserByEmailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/GetUserByEmail", ReplyAction="http://tempuri.org/DCDomainService/GetUserByEmailResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserByEmail(string email, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserByEmail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserByEmail'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserByEmail' operation.</returns>
            QueryResult<Patient> EndGetUserByEmail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DCDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DCDomainService/SubmitChanges", ReplyAction="http://tempuri.org/DCDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DCDomainContextEntityContainer : EntityContainer
        {
            
            public DCDomainContextEntityContainer()
            {
                this.CreateEntitySet<Cabinet>(EntitySetOperations.None);
                this.CreateEntitySet<Day>(EntitySetOperations.None);
                this.CreateEntitySet<Department>(EntitySetOperations.None);
                this.CreateEntitySet<Employee>(EntitySetOperations.None);
                this.CreateEntitySet<Examination>(EntitySetOperations.None);
                this.CreateEntitySet<ExaminationTemplate>(EntitySetOperations.None);
                this.CreateEntitySet<ExaminationType>(EntitySetOperations.None);
                this.CreateEntitySet<News>(EntitySetOperations.None);
                this.CreateEntitySet<Patient>(EntitySetOperations.None);
                this.CreateEntitySet<Referral>(EntitySetOperations.None);
            }
        }
    }
}
